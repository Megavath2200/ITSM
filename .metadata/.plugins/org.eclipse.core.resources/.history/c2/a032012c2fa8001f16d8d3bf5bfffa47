package com.ticketing.tool.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ticketing.tool.dto.UserInfo;
import com.ticketing.tool.service.AuthenticationService;

@RestController
@RequestMapping("/api/v1")
@CrossOrigin("*")
public class AuthenticationController {
	private Logger logger = LoggerFactory.getLogger(AuthenticationController.class);

	@Autowired
	private AuthenticationService service;

	@PostMapping("/auth/register")
	public ResponseEntity<?> register(@RequestBody UserInfo request) {
		try {
			logger.info("Registering user: {}", request);
			RegisterUserResponse response = service.register(request);
			logger.info("User registered successfully: {}", response.getMessage());
			return ResponseEntity.status(HttpStatus.CREATED).body(response.getMessage());
		} catch (UserAlreadyExistsException ex) {
			logger.warn("User already exists: {}", ex.getMessage());
			return ResponseEntity.status(HttpStatus.CONFLICT).body(ex.getMessage());
		}
	}

	@PostMapping("/auth/authenticate")
	public ResponseEntity<?> authenticate(@RequestBody AuthenticationRequest request,
			@RequestHeader(value = "User-Agent") String userAgent) {
		try {
			logger.info("Authenticating user: {}", request);
			AuthenticationResponse authenticate = service.authenticate(request, userAgent);
			logger.info("User authenticated successfully: {}", authenticate);
			return ResponseEntity.ok(authenticate);
		} catch (BadCredentialsException ex) {
			logger.warn("Bad credentials: {}", ex.getMessage());
			ErrorResponse errorResponse = new ErrorResponse(ex.getMessage());
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body(errorResponse);
		}
	}

}
