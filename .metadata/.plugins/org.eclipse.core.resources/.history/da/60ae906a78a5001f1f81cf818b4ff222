package com.ticketing.tool.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ticketing.tool.dto.TicketInfo;
import com.ticketing.tool.entity.Ticket;
import com.ticketing.tool.service.ITicket;

@RestController
@RequestMapping("/api/tickets")
public class TicketController {

	@Autowired
	private ITicket ticketService;

	private final String uploadDirectory = "C:/Media/";

	@PostMapping("/saveTicket")
	public ResponseEntity<Ticket> createTicket(@RequestParam("ticketInfo") String ticketInfoJson,
			@RequestParam("file") MultipartFile file) throws JsonProcessingException {

		TicketInfo ticketInfo = new ObjectMapper().readValue(ticketInfoJson, TicketInfo.class);

		String fileName = file.getOriginalFilename();
		String filePath = uploadDirectory + fileName;

		File directory = new File(uploadDirectory);
		if (!directory.exists()) {
			directory.mkdirs();
		}

		try {
			Files.copy(file.getInputStream(), Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);
		} catch (IOException e) {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		ticketInfo.setMedia(filePath);

		Ticket savedTicket = ticketService.saveTicket(ticketInfo);

		return new ResponseEntity<>(savedTicket, HttpStatus.CREATED);
	}

	@GetMapping("/getAllTickets")
	public ResponseEntity<?> getAllTickets() {
		List<Ticket> tickets = ticketService.getAllTicket();
		if (tickets.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<>(tickets, HttpStatus.OK);
	}

	@GetMapping("/next-id")
	public ResponseEntity<?> getNextTicketId() {
		try {
			Integer nextTicketId = ticketService.getTicketId();
			return new ResponseEntity<>(nextTicketId, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}