package com.ticketing.tool.configuration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;

import com.ticketing.tool.auth.JwtAuthenticationEntryPoint;
import com.ticketing.tool.auth.JwtAuthenticationFilter;

import java.util.List;

public class SecurityConfiguration {

	@Autowired
	private AuthenticationProvider authenticationProvider;
	@Autowired
	private JwtAuthenticationFilter jwtAuthFilter;
	@Autowired
	private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;

	List<String> endPoints = List.of("/api/v1/auction");

	/*
	 * List<String> endPoints = List.of("/api/v1/auction",
	 * "/api/v1/active/users/**", "/api/v1/lot-diamonds/**",
	 * "/api/v1/lot-diamond/uploadLotDiamond/**", "/api/v1/users",
	 * "/api/v1/lot-jewelleries/**", "/api/v1/auction-stocks/**", "/api/v1/orders",
	 * "/api/v1/users-summary", "/api/v1/invoice/list/**",
	 * "/api/v1/auction-stocks-jewellery/**");
	 */

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http

				.csrf(AbstractHttpConfigurer::disable).authorizeHttpRequests((authorizeHttpRequests) -> {
					authorizeHttpRequests.requestMatchers("/api/v1/auth/**", "/api/v1/countries/**",
							"/api/v1/user/kyc/**", "/api/v1/user/supplier/**", "/v3/api-docs/**", "/swagger-ui.html",
							"/swagger-ui/**", "/webjars/**").permitAll();
				}).authorizeHttpRequests((authorizeHttpRequests) -> {
					authorizeHttpRequests.requestMatchers("").hasRole("Bidder");
				}).authorizeHttpRequests((authorizeHttpRequests) -> {
					authorizeHttpRequests.requestMatchers(createRequestMatchers(endPoints)).hasRole("Auctioneer");
				})

				.authorizeHttpRequests((authorizeHttpRequests) -> {
					authorizeHttpRequests.anyRequest().authenticated();
				})
//                .exceptionHandling(httpSecurityExceptionHandlingConfigurer -> {
//                    httpSecurityExceptionHandlingConfigurer
//                            .authenticationEntryPoint(jwtAuthenticationEntryPoint);
//                })
//				.logout(logout -> logout.logoutUrl("/api/v1/auth/logout").addLogoutHandler(customLogoutHandler)
//						.invalidateHttpSession(true).logoutSuccessHandler(
//								(request, response, authentication) -> SecurityContextHolder.clearContext()))
				.sessionManagement((sessionManagement) -> sessionManagement.sessionConcurrency(
						(sessionConcurrency) -> sessionConcurrency.maximumSessions(1).expiredUrl("/login?expired")))
				.authenticationProvider(authenticationProvider)

				.addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);

		return http.build();
	}

	private RequestMatcher[] createRequestMatchers(List<String> endPoints) {
		return endPoints.stream().map(AntPathRequestMatcher::new).toArray(RequestMatcher[]::new);
	}

}
